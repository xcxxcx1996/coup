// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// The realtime protocol for the template match engine.
package api;

option go_package = "./api";



// The marks available in the game.
enum Role {
    //UNDEFINED
    UNROLE=0;
    // DIPLOMAT 0
    DIPLOMAT = 1;
    // QUEEN 1
    QUEEN = 2;
    // CAPTAIN 2
    CAPTAIN = 3;
    // ASSASSIN 3
    ASSASSIN=4;
    // BARON 4
    BARON=5;
}


enum State{
    //undefined
    UNDEFINED=0;
    //什么都做不了
    IDLE=1;
    // 自己回合开始，可以拿1，2，3块钱，和施放技能
    START=2;
    // 质疑
    QUESTION=3;
    // 保护自己，包括防偷牌，看牌，和刺杀
    DENY_MONEY=4;
    DENY_STEAL=5;
    DENY_ASSASSIN=6;
    DISCARD=7;
    CHOOSE_CARD=8;
    // DENY_CHECK=5;
}

// The complete set of opcodes used for communication between clients and server.
enum OpCode {
    // No opcode specified. Unused.
    OPCODE_UNCODE = 0;
    // 开始游戏
    OPCODE_START=1;
    // deny_assassian结束后的flag
    OPCODE_COMPLETE_DENY_KILL=2;
    // 玩家弃置卡牌
    OPCODE_DISCARD=3;
    // 拿钱
    OPCODE_DRAW_COINS = 4;
    // 质疑
    OPCODE_QUESTION=5;
    // 比赛结束
    OPCODE_DONE = 6;
    //偷牌
    OPCODE_STEAL_COINS = 7;
    //换牌
    OPCODE_CHANGE_CARD=8;
    //刺杀
    OPCODE_ASSASSIN=9;
    //拿3块钱
    OPCODE_DRAW_THREE_COINS=10;
    //防止偷拍
    OPCODE_DENY_STEAL=11;
    //防止刺杀
    OPCODE_DENY_KILL=12;
    // 阻止拿2块钱
    OPCODE_DENY_MONEY=13;
    //政变
    OPCODE_COUP=14;
    // OPCODE_DRAW_THREE_COINS=10;
    OPCODE_READY_START=15;
    // 更新
    OPCODE_UPDATE=16;
    // 错误
    OPCODE_REJECTED=17;
    // 选择卡牌
    OPCODE_CHOOSE_CARD=18;
    // 操作信息
    OPCODE_INFO=19;
    // 倒计时
    OPCODE_TICK=20;
    // 淘汰
    OPCODE_DEAD=21;
    
}

message PlayerInfo{
    //{"id":"1","name":"leo",cards:[{"id":"1","role":1}],"coins":10,state:1}
    string id=1;
    string name=2;
    repeated Card cards=3;
    int64 coins=4;
    State state=5;
}

message Card{
    //{"id":"","role":1}
    string id=1;
    Role role=2;
}

// Message data sent by server to clients representing a new game round starting.
message Start {
    // The assignments of the marks to players for this round.
    map<string, PlayerInfo> playerInfos = 1;
    // current_player_id 谁的回合
    string current_player_id  = 2;
    // string question_player_id=3;
    // The deadline time by which the player must submit their move, or forfeit.
    int64 deadline = 3;
    //比赛信息
    string message=4;
}

// 计时
message Tick{
    int64 deadline = 1;
}
// 历史信息
message Message {
    string info=1;
}

message ActionInfo {
    string message=1;
}

// A game state update sent by the server to clients.
message Update {
    // The assignments of the marks to players for this round.
    map<string, PlayerInfo> playerInfos = 1;
    // current_player_id 谁的回合
    string current_player_id  = 2;
    string question_player_id=3;
    // The deadline time by which the player must submit their move, or forfeit.
    //比赛信息
    string message=5;
}

message Done {
    PlayerInfo winner=1; 
}
// 准备开始
message ReadyToStart{
    int64 next_game_start = 1;
}
// 是否质询
message Question{
    bool is_question=1;
}
message Deny{
    bool is_deny=1;
}

// 获取金币 1块？2块
message GetCoin{
    int32 coins=1;
}
// 弃牌
message Discard{
    string card_id=1;
}
// 偷牌 被偷的玩家id
message StealCoins{
    // 指定玩家id
    string player_id=1;
}
// 换牌 cards []string
message ChangeCard{
    repeated string cards=1; 
}
// 刺杀 被刺杀的人的id
message Assassin{
    // 指定玩家id
    string player_id=1;

}

// 政变 政变目标的id
message Coup{
    // 指定玩家id
    string player_id=1;
}
// 换牌的参数，发送到客户端的参数
message ChangeCardRequest{
    repeated Card cards=1; 
}
// 换牌回应，选完牌，选的牌的id
message ChangeCardResponse{
    repeated string cards=1; 
}
message Dead{
    PlayerInfo player=1;
}
// Payload for an RPC request to find a match.
message RpcFindMatchRequest {
    // // User can choose a fast or normal speed match.
    bool fast = 1;
}


// Payload for an RPC response containing match IDs the user can join.
message RpcFindMatchResponse {
    // One or more matches that fit the user's request.
    repeated string match_ids = 1;
}
